<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureLogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>